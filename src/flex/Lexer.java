/* The following code was generated by JFlex 1.6.1 */

package flex;

/*

    OBSERVAÇÕES:

    Especificação do GO: https://golang.org/ref/spec#unicode_letter
    Exemplo para a linguagem JAVA: https://github.com/moy/JFlex/blob/master/jflex/examples/java/java.flex
    Documentação JFLEX: http://jflex.de/manual.html#ExampleLexRules
    Tutorialzinho legal: https://www.skenz.it/compilers/classroom/practice1_6.pdf
    Projeto de uma galera das antigas com JFLEX/Cup para C: https://github.com/brunomb/CCompiler

    Caracter "_" é considerado uma letra em GO.
    a-f dá matche em todos os caracteres de a até f
    [xX] dá matche em x ou X
    [^] dá matche em TODOS os caracteres
    [.] dá matche em todos os caracteres menos fim de linhas UNICODE

    Unicode letters = [:letter:]
    Unidode digits = [:digit:]

*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/flex/rules.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\26\1\27\1\1\22\0\1\55\1\56\1\30"+
    "\2\0\1\56\1\53\1\0\1\57\1\57\1\5\1\52\1\57\1\22"+
    "\1\23\1\4\1\16\7\15\2\15\1\56\1\57\1\61\1\54\1\63"+
    "\2\0\4\17\1\21\1\17\21\11\1\20\2\11\1\57\1\25\1\57"+
    "\1\62\1\11\1\24\1\33\1\31\1\41\1\35\1\7\1\36\1\43"+
    "\1\47\1\13\1\11\1\34\1\12\1\45\1\6\1\44\1\46\1\11"+
    "\1\32\1\42\1\40\1\37\1\51\1\10\1\20\1\50\1\11\1\57"+
    "\1\60\1\57\7\0\1\26\44\0\1\11\12\0\1\11\4\0\1\11"+
    "\5\0\27\11\1\0\37\11\1\0\u01ca\11\4\0\14\11\16\0\5\11"+
    "\7\0\1\11\1\0\1\11\201\0\5\11\1\0\2\11\2\0\4\11"+
    "\1\0\1\11\6\0\1\11\1\0\3\11\1\0\1\11\1\0\24\11"+
    "\1\0\123\11\1\0\213\11\10\0\246\11\1\0\46\11\2\0\1\11"+
    "\7\0\47\11\110\0\33\11\5\0\3\11\55\0\53\11\25\0\12\14"+
    "\4\0\2\11\1\0\143\11\1\0\1\11\17\0\2\11\7\0\2\11"+
    "\12\14\3\11\2\0\1\11\20\0\1\11\1\0\36\11\35\0\131\11"+
    "\13\0\1\11\16\0\12\14\41\11\11\0\2\11\4\0\1\11\5\0"+
    "\26\11\4\0\1\11\11\0\1\11\3\0\1\11\27\0\31\11\107\0"+
    "\23\11\121\0\66\11\3\0\1\11\22\0\1\11\7\0\12\11\4\0"+
    "\12\14\1\0\20\11\4\0\10\11\2\0\2\11\2\0\26\11\1\0"+
    "\7\11\1\0\1\11\3\0\4\11\3\0\1\11\20\0\1\11\15\0"+
    "\2\11\1\0\3\11\4\0\12\14\2\11\23\0\6\11\4\0\2\11"+
    "\2\0\26\11\1\0\7\11\1\0\2\11\1\0\2\11\1\0\2\11"+
    "\37\0\4\11\1\0\1\11\7\0\12\14\2\0\3\11\20\0\11\11"+
    "\1\0\3\11\1\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\3\0\1\11\22\0\1\11\17\0\2\11\4\0\12\14\25\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\3\0\1\11\36\0\2\11\1\0\3\11\4\0\12\14\1\0\1\11"+
    "\21\0\1\11\1\0\6\11\3\0\3\11\1\0\4\11\3\0\2\11"+
    "\1\0\1\11\1\0\2\11\3\0\2\11\3\0\3\11\3\0\14\11"+
    "\26\0\1\11\25\0\12\14\25\0\10\11\1\0\3\11\1\0\27\11"+
    "\1\0\20\11\3\0\1\11\32\0\2\11\6\0\2\11\4\0\12\14"+
    "\25\0\10\11\1\0\3\11\1\0\27\11\1\0\12\11\1\0\5\11"+
    "\3\0\1\11\40\0\1\11\1\0\2\11\4\0\12\14\1\0\2\11"+
    "\22\0\10\11\1\0\3\11\1\0\51\11\2\0\1\11\20\0\1\11"+
    "\21\0\2\11\4\0\12\14\12\0\6\11\5\0\22\11\3\0\30\11"+
    "\1\0\11\11\1\0\1\11\2\0\7\11\37\0\12\14\21\0\60\11"+
    "\1\0\2\11\14\0\7\11\11\0\12\14\47\0\2\11\1\0\1\11"+
    "\2\0\2\11\1\0\1\11\2\0\1\11\6\0\4\11\1\0\7\11"+
    "\1\0\3\11\1\0\1\11\1\0\1\11\2\0\2\11\1\0\4\11"+
    "\1\0\2\11\11\0\1\11\2\0\5\11\1\0\1\11\11\0\12\14"+
    "\2\0\4\11\40\0\1\11\37\0\12\14\26\0\10\11\1\0\44\11"+
    "\33\0\5\11\163\0\53\11\24\0\1\11\12\14\6\0\6\11\4\0"+
    "\4\11\3\0\1\11\3\0\2\11\7\0\3\11\4\0\15\11\14\0"+
    "\1\11\1\0\12\14\6\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\53\11\1\0\u014d\11\1\0\4\11\2\0\7\11\1\0\1\11\1\0"+
    "\4\11\2\0\51\11\1\0\4\11\2\0\41\11\1\0\4\11\2\0"+
    "\7\11\1\0\1\11\1\0\4\11\2\0\17\11\1\0\71\11\1\0"+
    "\4\11\2\0\103\11\45\0\20\11\20\0\125\11\14\0\u026c\11\2\0"+
    "\21\11\1\0\32\11\5\0\113\11\6\0\10\11\7\0\15\11\1\0"+
    "\4\11\16\0\22\11\16\0\22\11\16\0\15\11\1\0\3\11\17\0"+
    "\64\11\43\0\1\11\4\0\1\11\3\0\12\14\46\0\12\14\6\0"+
    "\130\11\10\0\51\11\1\0\1\11\5\0\106\11\12\0\37\11\47\0"+
    "\12\14\36\11\2\0\5\11\13\0\54\11\25\0\7\11\10\0\12\14"+
    "\46\0\27\11\11\0\65\11\53\0\12\14\6\0\12\14\15\0\1\11"+
    "\135\0\57\11\21\0\7\11\4\0\12\14\51\0\36\11\15\0\2\11"+
    "\12\14\54\11\32\0\44\11\34\0\12\14\3\0\3\11\12\14\44\11"+
    "\153\0\4\11\1\0\4\11\3\0\2\11\11\0\300\11\100\0\u0116\11"+
    "\2\0\6\11\2\0\46\11\2\0\6\11\2\0\10\11\1\0\1\11"+
    "\1\0\1\11\1\0\1\11\1\0\37\11\2\0\65\11\1\0\7\11"+
    "\1\0\1\11\3\0\3\11\1\0\7\11\3\0\4\11\2\0\6\11"+
    "\4\0\15\11\5\0\3\11\1\0\7\11\53\0\1\26\1\26\107\0"+
    "\1\11\15\0\1\11\20\0\15\11\145\0\1\11\4\0\1\11\2\0"+
    "\12\11\1\0\1\11\3\0\5\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\4\11\1\0\13\11\2\0\4\11\5\0\5\11\4\0"+
    "\1\11\64\0\2\11\u0a7b\0\57\11\1\0\57\11\1\0\205\11\6\0"+
    "\4\11\3\0\2\11\14\0\46\11\1\0\1\11\5\0\1\11\2\0"+
    "\70\11\7\0\1\11\20\0\27\11\11\0\7\11\1\0\7\11\1\0"+
    "\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0\7\11\1\0"+
    "\7\11\120\0\1\11\u01d5\0\2\11\52\0\5\11\5\0\2\11\4\0"+
    "\126\11\6\0\3\11\1\0\132\11\1\0\4\11\5\0\51\11\3\0"+
    "\136\11\21\0\33\11\65\0\20\11\u0200\0\u19b6\11\112\0\u51cd\11\63\0"+
    "\u048d\11\103\0\56\11\2\0\u010d\11\3\0\20\11\12\14\2\11\24\0"+
    "\57\11\20\0\37\11\2\0\106\11\61\0\11\11\2\0\147\11\2\0"+
    "\4\11\1\0\36\11\2\0\2\11\105\0\13\11\1\0\3\11\1\0"+
    "\4\11\1\0\27\11\35\0\64\11\16\0\62\11\34\0\12\14\30\0"+
    "\6\11\3\0\1\11\4\0\12\14\34\11\12\0\27\11\31\0\35\11"+
    "\7\0\57\11\34\0\1\11\12\14\6\0\5\11\1\0\12\11\12\14"+
    "\5\11\1\0\51\11\27\0\3\11\1\0\10\11\4\0\12\14\6\0"+
    "\27\11\3\0\1\11\3\0\62\11\1\0\1\11\3\0\2\11\2\0"+
    "\5\11\2\0\1\11\1\0\1\11\30\0\3\11\2\0\13\11\7\0"+
    "\3\11\14\0\6\11\2\0\6\11\2\0\6\11\11\0\7\11\1\0"+
    "\7\11\1\0\53\11\1\0\4\11\4\0\2\11\132\0\43\11\15\0"+
    "\12\14\6\0\u2ba4\11\14\0\27\11\4\0\61\11\u2104\0\u016e\11\2\0"+
    "\152\11\46\0\7\11\14\0\5\11\5\0\1\11\1\0\12\11\1\0"+
    "\15\11\1\0\5\11\1\0\1\11\1\0\2\11\1\0\2\11\1\0"+
    "\154\11\41\0\u016b\11\22\0\100\11\2\0\66\11\50\0\14\11\164\0"+
    "\5\11\1\0\207\11\23\0\12\14\7\0\32\11\6\0\32\11\13\0"+
    "\131\11\3\0\6\11\2\0\6\11\2\0\6\11\2\0\3\11\43\0"+
    "\14\11\1\0\32\11\1\0\23\11\1\0\2\11\1\0\17\11\2\0"+
    "\16\11\42\0\173\11\u0185\0\35\11\3\0\61\11\57\0\40\11\20\0"+
    "\21\11\1\0\10\11\6\0\46\11\12\0\36\11\2\0\44\11\4\0"+
    "\10\11\60\0\236\11\2\0\12\14\126\0\50\11\10\0\64\11\234\0"+
    "\u0137\11\11\0\26\11\12\0\10\11\230\0\6\11\2\0\1\11\1\0"+
    "\54\11\1\0\2\11\3\0\1\11\2\0\27\11\12\0\27\11\11\0"+
    "\37\11\141\0\26\11\12\0\32\11\106\0\70\11\6\0\2\11\100\0"+
    "\1\11\17\0\4\11\1\0\3\11\1\0\33\11\54\0\35\11\3\0"+
    "\35\11\43\0\10\11\1\0\34\11\33\0\66\11\12\0\26\11\12\0"+
    "\23\11\15\0\22\11\156\0\111\11\u03ba\0\65\11\56\0\12\14\23\0"+
    "\55\11\40\0\31\11\7\0\12\14\11\0\44\11\17\0\12\14\20\0"+
    "\43\11\3\0\1\11\14\0\60\11\16\0\4\11\13\0\12\14\1\11"+
    "\45\0\22\11\1\0\31\11\204\0\57\11\21\0\12\14\13\0\10\11"+
    "\2\0\2\11\2\0\26\11\1\0\7\11\1\0\2\11\1\0\5\11"+
    "\3\0\1\11\37\0\5\11\u011e\0\60\11\24\0\2\11\1\0\1\11"+
    "\10\0\12\14\246\0\57\11\121\0\60\11\24\0\1\11\13\0\12\14"+
    "\46\0\53\11\25\0\12\14\u01d6\0\100\11\12\14\25\0\1\11\u01c0\0"+
    "\71\11\u0507\0\u0399\11\u0c67\0\u042f\11\u33d1\0\u0239\11\7\0\37\11\1\0"+
    "\12\14\146\0\36\11\22\0\60\11\20\0\4\11\14\0\12\14\11\0"+
    "\25\11\5\0\23\11\u0370\0\105\11\13\0\1\11\102\0\15\11\u4060\0"+
    "\2\11\u0bfe\0\153\11\5\0\15\11\3\0\11\11\7\0\12\11\u1766\0"+
    "\125\11\1\0\107\11\1\0\2\11\2\0\1\11\2\0\2\11\2\0"+
    "\4\11\1\0\14\11\1\0\1\11\1\0\7\11\1\0\101\11\1\0"+
    "\4\11\2\0\10\11\1\0\7\11\1\0\34\11\1\0\4\11\1\0"+
    "\5\11\1\0\1\11\3\0\7\11\1\0\u0154\11\2\0\31\11\1\0"+
    "\31\11\1\0\37\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0"+
    "\37\11\1\0\31\11\1\0\37\11\1\0\31\11\1\0\10\11\2\0"+
    "\62\14\u1000\0\305\11\u053b\0\4\11\1\0\33\11\1\0\2\11\1\0"+
    "\1\11\2\0\1\11\1\0\12\11\1\0\4\11\1\0\1\11\1\0"+
    "\1\11\6\0\1\11\4\0\1\11\1\0\1\11\1\0\1\11\1\0"+
    "\3\11\1\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\1\0\2\11\1\0\1\11\2\0"+
    "\4\11\1\0\7\11\1\0\4\11\1\0\4\11\1\0\1\11\1\0"+
    "\12\11\1\0\21\11\5\0\3\11\1\0\5\11\1\0\21\11\u1144\0"+
    "\ua6d7\11\51\0\u1035\11\13\0\336\11\u3fe2\0\u021e\11\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05f0\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\3\3\4\1\5\1\1\2\3"+
    "\2\1\13\4\6\3\1\6\1\0\2\4\1\7\1\4"+
    "\1\0\1\10\1\11\1\0\1\12\2\0\1\13\3\0"+
    "\15\4\1\7\2\4\2\0\1\6\1\0\3\4\1\11"+
    "\1\0\15\4\1\14\13\4\2\14\14\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\64\0\234\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8"+
    "\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478"+
    "\0\u04ac\0\u04e0\0\u0514\0\u0548\0\64\0\u057c\0\u05b0\0\u05e4"+
    "\0\u0618\0\u064c\0\u0680\0\u06b4\0\u0104\0\u06e8\0\u071c\0\64"+
    "\0\u0750\0\u0784\0\u07b8\0\u07ec\0\u0270\0\64\0\u0820\0\u02a4"+
    "\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c\0\u09c0"+
    "\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60"+
    "\0\u0b94\0\u0bc8\0\u0bfc\0\64\0\u0c30\0\u0c64\0\u0c98\0\u0ccc"+
    "\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u100c"+
    "\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178\0\u11ac"+
    "\0\u11e0\0\u1214\0\u1248\0\u127c\0\64\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\3\7"+
    "\1\11\1\2\1\12\1\13\3\7\1\14\1\15\1\16"+
    "\2\2\1\4\1\17\1\20\1\21\2\7\1\22\1\23"+
    "\1\7\1\24\1\25\1\26\1\27\1\7\1\30\1\31"+
    "\2\7\1\32\1\33\1\34\1\6\1\4\1\6\1\35"+
    "\1\36\1\37\1\6\1\40\66\0\1\4\65\0\1\41"+
    "\1\42\46\0\1\35\63\0\1\35\15\0\14\7\7\0"+
    "\21\7\20\0\4\7\1\43\7\7\7\0\21\7\20\0"+
    "\1\44\13\7\7\0\5\7\1\45\6\7\1\46\4\7"+
    "\21\0\1\47\3\0\1\50\1\0\2\12\2\0\1\47"+
    "\1\0\1\51\47\0\1\47\5\0\2\52\1\0\1\53"+
    "\1\47\1\0\1\51\62\0\1\35\31\0\1\35\24\0"+
    "\2\51\4\0\1\54\40\0\24\55\1\56\1\57\36\55"+
    "\25\60\1\61\2\60\1\56\33\60\6\0\14\7\7\0"+
    "\1\7\1\62\17\7\20\0\1\7\1\63\12\7\7\0"+
    "\2\7\1\64\16\7\20\0\1\7\1\65\12\7\7\0"+
    "\21\7\20\0\14\7\7\0\2\7\1\66\3\7\1\67"+
    "\4\7\1\70\5\7\20\0\14\7\7\0\17\7\1\71"+
    "\1\7\20\0\14\7\7\0\2\7\1\43\10\7\1\72"+
    "\2\7\1\73\2\7\20\0\1\7\1\74\1\75\11\7"+
    "\7\0\7\7\1\76\11\7\20\0\14\7\7\0\13\7"+
    "\1\77\5\7\20\0\14\7\7\0\2\7\1\100\16\7"+
    "\20\0\14\7\7\0\2\7\1\101\16\7\20\0\14\7"+
    "\7\0\2\7\1\70\16\7\64\0\1\35\1\0\1\102"+
    "\62\0\2\35\5\0\1\103\55\0\1\35\3\0\1\35"+
    "\25\0\1\35\31\0\1\35\4\0\1\6\56\0\1\35"+
    "\6\0\1\6\2\41\1\104\61\41\4\42\1\0\1\105"+
    "\56\42\6\0\14\7\7\0\11\7\1\106\7\7\20\0"+
    "\14\7\7\0\7\7\1\107\11\7\20\0\14\7\7\0"+
    "\15\7\1\110\3\7\27\0\2\111\3\0\1\112\27\0"+
    "\1\112\20\0\1\47\3\0\1\50\1\0\2\51\2\0"+
    "\1\47\51\0\1\47\5\0\2\52\2\0\1\47\1\0"+
    "\1\51\47\0\1\53\5\0\3\53\1\0\1\53\7\0"+
    "\1\53\1\0\1\53\1\0\2\53\2\0\1\53\45\0"+
    "\1\35\40\0\1\55\2\0\23\55\2\0\34\55\1\60"+
    "\2\0\23\60\2\0\34\60\6\0\1\7\1\113\12\7"+
    "\7\0\21\7\20\0\14\7\7\0\7\7\1\114\11\7"+
    "\20\0\1\115\13\7\7\0\21\7\20\0\14\7\7\0"+
    "\5\7\1\116\13\7\20\0\4\7\1\117\7\7\7\0"+
    "\21\7\20\0\1\120\13\7\7\0\21\7\20\0\14\7"+
    "\7\0\1\7\1\45\17\7\20\0\14\7\7\0\15\7"+
    "\1\106\3\7\20\0\1\121\13\7\7\0\21\7\20\0"+
    "\14\7\7\0\2\7\1\122\16\7\20\0\4\7\1\123"+
    "\7\7\7\0\21\7\20\0\5\7\1\124\6\7\7\0"+
    "\21\7\20\0\14\7\7\0\1\7\1\125\17\7\20\0"+
    "\14\7\7\0\7\7\1\126\11\7\20\0\14\7\7\0"+
    "\15\7\1\45\3\7\20\0\14\7\7\0\10\7\1\127"+
    "\10\7\67\0\1\35\62\0\2\35\12\0\1\130\65\0"+
    "\1\7\1\45\12\7\7\0\21\7\20\0\1\7\1\131"+
    "\12\7\7\0\21\7\20\0\14\7\7\0\13\7\1\132"+
    "\5\7\25\0\1\50\1\0\2\111\62\0\2\111\53\0"+
    "\14\7\7\0\2\7\1\133\16\7\20\0\14\7\7\0"+
    "\6\7\1\134\12\7\20\0\14\7\7\0\12\7\1\106"+
    "\6\7\20\0\1\7\1\70\12\7\7\0\2\7\1\135"+
    "\16\7\20\0\4\7\1\136\7\7\7\0\21\7\20\0"+
    "\14\7\7\0\10\7\1\45\10\7\20\0\14\7\7\0"+
    "\7\7\1\137\1\7\1\140\7\7\20\0\1\45\13\7"+
    "\7\0\21\7\20\0\1\7\1\141\12\7\7\0\21\7"+
    "\20\0\14\7\7\0\7\7\1\142\11\7\20\0\14\7"+
    "\7\0\6\7\1\141\12\7\20\0\14\7\7\0\13\7"+
    "\1\45\5\7\20\0\14\7\7\0\3\7\1\143\15\7"+
    "\13\0\1\144\1\145\67\0\14\7\7\0\1\7\1\146"+
    "\17\7\20\0\14\7\7\0\1\7\1\140\17\7\20\0"+
    "\14\7\7\0\3\7\1\45\15\7\20\0\14\7\7\0"+
    "\1\7\1\122\17\7\20\0\14\7\7\0\6\7\1\147"+
    "\12\7\20\0\14\7\7\0\7\7\1\150\11\7\20\0"+
    "\5\7\1\151\6\7\7\0\21\7\20\0\14\7\7\0"+
    "\7\7\1\45\11\7\20\0\14\7\7\0\10\7\1\140"+
    "\10\7\20\0\14\7\7\0\10\7\1\152\10\7\20\0"+
    "\14\7\7\0\2\7\1\115\16\7\14\0\1\145\67\0"+
    "\14\7\7\0\5\7\1\153\13\7\20\0\4\7\1\140"+
    "\7\7\7\0\21\7\20\0\14\7\7\0\16\7\1\154"+
    "\2\7\20\0\1\155\13\7\7\0\21\7\20\0\14\7"+
    "\7\0\16\7\1\45\2\7\20\0\14\7\7\0\2\7"+
    "\1\156\16\7\20\0\14\7\7\0\1\7\1\157\17\7"+
    "\20\0\14\7\7\0\6\7\1\106\12\7\20\0\14\7"+
    "\7\0\10\7\1\106\10\7\20\0\14\7\7\0\13\7"+
    "\1\160\5\7\20\0\14\7\7\0\6\7\1\161\12\7"+
    "\20\0\14\7\7\0\12\7\1\152\6\7\12\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5408];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\30\1\1\11\4\1\1\0"+
    "\4\1\1\0\1\11\1\1\1\0\1\1\2\0\1\11"+
    "\3\0\20\1\2\0\1\11\1\0\4\1\1\0\32\1"+
    "\1\11\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[113];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2484) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.print(yytext());
            }
          case 13: break;
          case 2: 
            { /* Ignore */
            }
          case 14: break;
          case 3: 
            { System.out.println("Found operator/punctuation: " + yytext());
            }
          case 15: break;
          case 4: 
            { System.out.println("Found identifier: " + yytext());
            }
          case 16: break;
          case 5: 
            { System.out.println("Found decimal literal:" + yytext());
            }
          case 17: break;
          case 6: 
            { System.out.println("Found inline comment:" + yytext().substring(2));
            }
          case 18: break;
          case 7: 
            { System.out.println("Found keyword: " + yytext());
            }
          case 19: break;
          case 8: 
            { System.out.println("Found imaginary literal: " + yytext());
            }
          case 20: break;
          case 9: 
            { System.out.println("Found float literal:" + yytext());
            }
          case 21: break;
          case 10: 
            { System.out.println("Found hex literal:" + yytext());
            }
          case 22: break;
          case 11: 
            { System.out.println("Found string literal: " + yytext());
            }
          case 23: break;
          case 12: 
            { System.out.println("Found traditional comment: " + yytext()); yyline++; yybegin(0);
            }
          case 24: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
