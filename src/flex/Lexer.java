/* The following code was generated by JFlex 1.6.1 */

package flex;
import java_cup.runtime.*;
import cup.sym;
/*

    OBSERVAÇÕES:

    Especificação do GO: https://golang.org/ref/spec#unicode_letter
    Exemplo para a linguagem JAVA: https://github.com/moy/JFlex/blob/master/jflex/examples/java/java.flex
    Documentação JFLEX: http://jflex.de/manual.html#ExampleLexRules
    Tutorialzinho legal: https://www.skenz.it/compilers/classroom/practice1_6.pdf
    Projeto de uma galera das antigas com JFLEX/Cup para C: https://github.com/brunomb/CCompiler

    Caracter "_" é considerado uma letra em GO.
    a-f dá matche em todos os caracteres de a até f
    [xX] dá matche em x ou X
    [^] dá matche em TODOS os caracteres
    [.] dá matche em todos os caracteres menos fim de linhas UNICODE

    Unicode letters = [:letter:]
    Unidode digits = [:digit:]

*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/flex/rules.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\2\1\5\1\4\1\27\1\30\1\3\16\2\4\0\1\57\1\60"+
    "\1\32\1\0\1\1\1\76\1\55\1\0\1\61\1\62\1\7\1\54"+
    "\1\74\1\23\1\24\1\6\1\16\7\20\2\15\1\73\1\75\1\64"+
    "\1\56\1\70\2\0\4\17\1\22\1\17\21\1\1\21\2\1\1\65"+
    "\1\26\1\66\1\67\1\1\1\25\1\35\1\33\1\43\1\37\1\11"+
    "\1\40\1\45\1\51\1\14\1\1\1\36\1\13\1\47\1\10\1\46"+
    "\1\50\1\1\1\34\1\44\1\42\1\41\1\53\1\12\1\21\1\52"+
    "\1\1\1\71\1\63\1\72\1\0\6\2\1\31\32\2\2\0\4\1"+
    "\4\0\1\1\2\0\1\2\7\0\1\1\4\0\1\1\5\0\27\1"+
    "\1\0\37\1\1\0\u01ca\1\4\0\14\1\16\0\5\1\7\0\1\1"+
    "\1\0\1\1\21\0\160\2\5\1\1\0\2\1\2\0\4\1\1\0"+
    "\1\0\6\0\1\1\1\0\3\1\1\0\1\1\1\0\24\1\1\0"+
    "\123\1\1\0\213\1\1\0\5\2\2\0\236\1\10\0\1\0\46\1"+
    "\2\0\1\1\7\0\47\1\7\0\1\1\1\0\55\2\1\0\1\2"+
    "\1\0\2\2\1\0\2\2\1\0\1\2\10\0\33\1\5\0\3\1"+
    "\15\0\5\2\6\0\1\1\4\0\13\2\5\0\53\1\37\2\4\0"+
    "\2\1\1\2\143\1\1\0\1\1\10\2\1\0\6\2\2\1\2\2"+
    "\1\0\4\2\2\1\12\2\3\1\2\0\1\1\17\0\1\2\1\1"+
    "\1\2\36\1\33\2\2\0\131\1\13\2\1\1\16\0\12\2\41\1"+
    "\11\2\2\1\4\0\1\1\5\0\26\1\4\2\1\1\11\2\1\1"+
    "\3\2\1\1\5\2\22\0\31\1\3\2\104\0\1\1\1\0\13\1"+
    "\6\0\61\0\33\2\1\0\4\2\66\1\3\2\1\1\22\2\1\1"+
    "\7\2\12\1\2\2\2\0\12\2\1\0\7\1\1\0\7\1\1\0"+
    "\3\2\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1\1\0"+
    "\1\1\3\0\4\1\2\0\1\2\1\1\7\2\2\0\2\2\2\0"+
    "\3\2\1\1\10\0\1\2\4\0\2\1\1\0\3\1\2\2\2\0"+
    "\12\2\2\1\2\1\7\0\1\1\5\0\3\2\1\0\6\1\4\0"+
    "\2\1\2\0\26\1\1\0\7\1\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\2\0\1\2\1\0\5\2\4\0\2\2\2\0\3\2\3\0"+
    "\1\2\7\0\4\1\1\0\1\1\7\0\14\2\3\1\1\2\13\0"+
    "\3\2\1\0\11\1\1\0\3\1\1\0\26\1\1\0\7\1\1\0"+
    "\2\1\1\0\5\1\2\0\1\2\1\1\10\2\1\0\3\2\1\0"+
    "\3\2\2\0\1\1\17\0\2\1\2\2\2\0\12\2\1\0\1\1"+
    "\17\0\3\2\1\0\10\1\2\0\2\1\2\0\26\1\1\0\7\1"+
    "\1\0\2\1\1\0\5\1\2\0\1\2\1\1\7\2\2\0\2\2"+
    "\2\0\3\2\10\0\2\2\4\0\2\1\1\0\3\1\2\2\2\0"+
    "\12\2\1\0\1\1\20\0\1\2\1\1\1\0\6\1\3\0\3\1"+
    "\1\0\4\1\3\0\2\1\1\0\1\1\1\0\2\1\3\0\2\1"+
    "\3\0\3\1\3\0\14\1\4\0\5\2\3\0\3\2\1\0\4\2"+
    "\2\0\1\1\6\0\1\2\16\0\12\2\11\0\1\1\7\0\3\2"+
    "\1\0\10\1\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1"+
    "\3\0\1\1\7\2\1\0\3\2\1\0\4\2\7\0\2\2\1\0"+
    "\2\1\6\0\2\1\2\2\2\0\12\2\22\0\2\2\1\0\10\1"+
    "\1\0\3\1\1\0\27\1\1\0\12\1\1\0\5\1\2\0\1\2"+
    "\1\1\7\2\1\0\3\2\1\0\4\2\7\0\2\2\7\0\1\1"+
    "\1\0\2\1\2\2\2\0\12\2\1\0\2\1\17\0\2\2\1\0"+
    "\10\1\1\0\3\1\1\0\51\1\2\0\1\1\7\2\1\0\3\2"+
    "\1\0\4\2\1\1\10\0\1\2\10\0\2\1\2\2\2\0\12\2"+
    "\12\0\6\1\2\0\2\2\1\0\22\1\3\0\30\1\1\0\11\1"+
    "\1\0\1\1\2\0\7\1\3\0\1\2\4\0\6\2\1\0\1\2"+
    "\1\0\10\2\22\0\2\2\15\0\60\1\1\2\2\1\7\2\4\0"+
    "\1\1\7\1\10\2\1\0\12\2\47\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\2\0\1\1\6\0\4\1\1\0\7\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\2\0\2\1\1\0\4\1\1\2"+
    "\2\1\6\2\1\0\2\2\1\1\2\0\5\1\1\0\1\1\1\0"+
    "\6\2\2\0\12\2\2\0\4\1\40\0\1\1\27\0\2\2\6\0"+
    "\12\2\13\0\1\2\1\0\1\2\1\0\1\2\4\0\2\2\10\1"+
    "\1\0\44\1\4\0\24\2\1\0\2\2\5\1\13\2\1\0\44\2"+
    "\11\0\1\2\71\0\53\1\24\2\1\1\12\2\6\0\6\1\4\2"+
    "\4\1\3\2\1\1\3\2\2\1\7\2\3\1\4\2\15\1\14\2"+
    "\1\1\17\2\2\0\46\1\1\0\1\1\5\0\1\1\2\0\53\1"+
    "\1\0\u014d\1\1\0\4\1\2\0\7\1\1\0\1\1\1\0\4\1"+
    "\2\0\51\1\1\0\4\1\2\0\41\1\1\0\4\1\2\0\7\1"+
    "\1\0\1\1\1\0\4\1\2\0\17\1\1\0\71\1\1\0\4\1"+
    "\2\0\103\1\2\0\3\2\40\0\20\1\20\0\125\1\14\0\u026c\1"+
    "\2\0\21\1\1\0\32\1\5\0\113\1\3\0\3\1\10\0\7\0"+
    "\15\1\1\0\4\1\3\2\13\0\22\1\3\2\13\0\22\1\2\2"+
    "\14\0\15\1\1\0\3\1\1\0\2\2\14\0\64\1\40\2\3\0"+
    "\1\1\3\0\1\1\1\1\1\2\2\0\12\2\41\0\3\2\2\0"+
    "\12\2\6\0\130\1\10\0\51\1\1\2\1\1\5\0\106\1\12\0"+
    "\35\1\2\0\1\0\14\2\4\0\14\2\12\0\12\2\36\1\2\0"+
    "\5\1\13\0\54\1\4\0\21\2\7\1\2\2\6\0\12\2\46\0"+
    "\27\1\5\2\4\0\65\1\12\2\1\0\35\2\2\0\13\2\6\0"+
    "\12\2\15\0\1\1\130\0\5\2\57\1\21\2\7\1\4\0\12\2"+
    "\21\0\11\2\14\0\3\2\36\1\15\2\2\1\12\2\54\1\16\2"+
    "\14\0\44\1\24\2\10\0\12\2\3\0\3\1\12\2\44\1\122\0"+
    "\3\2\1\0\25\2\4\1\1\2\4\1\3\2\2\1\11\0\300\1"+
    "\47\2\25\0\4\2\u0116\1\2\0\6\1\2\0\46\1\2\0\6\1"+
    "\2\0\10\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0\37\1"+
    "\2\0\65\1\1\0\7\1\1\0\1\1\3\0\3\1\1\0\7\1"+
    "\3\0\4\1\2\0\6\1\4\0\15\1\5\0\3\1\1\0\7\1"+
    "\16\0\5\2\30\0\1\27\1\27\5\2\20\0\2\1\23\0\1\1"+
    "\13\0\5\2\5\0\6\2\1\0\1\1\15\0\1\1\20\0\15\1"+
    "\3\0\33\1\25\0\15\2\4\0\1\2\3\0\14\2\21\0\1\1"+
    "\4\0\1\1\2\0\12\1\1\0\1\1\3\0\5\1\6\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\4\1\1\0\13\1\2\0\4\1"+
    "\5\0\5\1\4\0\1\1\21\0\43\1\2\1\4\1\u0a77\0\57\1"+
    "\1\0\57\1\1\0\205\1\6\0\4\1\3\2\2\1\14\0\46\1"+
    "\1\0\1\1\5\0\1\1\2\0\70\1\7\0\1\1\17\0\1\2"+
    "\27\1\11\0\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0"+
    "\7\1\1\0\7\1\1\0\7\1\1\0\7\1\1\0\40\2\57\0"+
    "\1\1\u01d5\0\2\1\1\1\31\0\11\1\6\2\1\0\5\1\2\0"+
    "\3\1\2\1\4\0\126\1\2\0\2\2\2\0\3\1\1\0\132\1"+
    "\1\0\4\1\5\0\51\1\3\0\136\1\21\0\33\1\65\0\20\1"+
    "\u0200\0\u19b6\1\112\0\u51cd\1\63\0\u048d\1\103\0\56\1\2\0\u010d\1"+
    "\3\0\20\1\12\2\2\1\24\0\57\1\1\2\4\0\12\2\1\0"+
    "\31\1\6\0\1\0\1\2\106\1\12\1\2\2\45\0\11\1\2\0"+
    "\147\1\2\0\4\1\1\0\4\1\14\0\13\1\3\0\2\0\2\0"+
    "\105\0\1\0\12\1\1\2\3\1\1\2\4\1\1\2\27\1\5\2"+
    "\20\0\1\1\7\0\64\1\14\0\2\2\62\1\21\2\13\0\12\2"+
    "\6\0\22\2\6\1\3\0\1\1\4\0\12\2\34\1\10\2\2\0"+
    "\27\1\15\2\14\0\35\1\3\0\4\2\57\1\16\2\16\0\1\1"+
    "\12\2\6\0\5\0\1\0\12\0\12\0\5\0\1\0\51\1\16\2"+
    "\11\0\3\1\1\2\10\1\2\2\2\0\12\2\6\0\27\1\3\0"+
    "\1\1\1\2\2\0\2\0\60\1\1\2\1\1\3\2\2\1\2\2"+
    "\5\1\2\2\1\1\1\2\1\1\30\0\3\1\2\0\13\1\5\2"+
    "\2\0\3\1\2\2\12\0\6\1\2\0\6\1\2\0\6\1\11\0"+
    "\7\1\1\0\7\1\1\0\53\0\1\0\4\0\4\0\2\0\132\0"+
    "\43\1\10\2\1\0\2\2\2\0\12\2\6\0\u2ba4\1\14\0\27\1"+
    "\4\0\61\1\u2104\0\u016e\1\2\0\152\1\46\0\7\1\14\0\5\1"+
    "\5\0\1\1\1\2\12\1\1\0\15\1\1\0\5\1\1\0\1\1"+
    "\1\0\2\1\1\0\2\1\1\0\154\1\41\0\u016b\1\22\0\100\1"+
    "\2\0\66\1\50\0\14\1\1\1\3\0\20\2\20\0\7\2\14\0"+
    "\2\1\30\0\3\1\31\0\1\1\6\0\5\1\1\0\207\1\2\0"+
    "\1\2\4\0\1\1\13\0\12\2\7\0\32\1\4\0\1\1\1\0"+
    "\32\1\13\0\131\1\3\0\6\1\2\0\6\1\2\0\6\1\2\0"+
    "\3\1\3\0\2\1\3\0\2\1\22\0\3\2\4\0\14\1\1\0"+
    "\32\1\1\0\23\1\1\0\2\1\1\0\17\1\2\0\16\1\42\0"+
    "\173\1\105\0\65\1\210\0\1\2\202\0\35\1\3\0\61\1\57\0"+
    "\37\1\1\0\20\0\21\1\1\1\10\1\1\1\5\0\46\0\12\0"+
    "\36\1\2\0\44\1\4\0\10\1\1\0\5\1\52\0\236\1\2\0"+
    "\12\2\126\0\50\0\10\0\64\0\234\0\u0137\0\11\0\26\0\12\0"+
    "\10\0\230\0\6\1\2\0\1\1\1\0\54\1\1\0\2\1\3\0"+
    "\1\1\2\0\27\1\12\0\27\0\11\0\37\0\141\0\26\1\12\0"+
    "\32\1\106\0\70\1\6\0\2\1\100\0\1\1\3\2\1\0\2\2"+
    "\5\0\4\2\4\1\1\0\3\1\1\0\33\1\4\0\3\2\4\0"+
    "\1\2\40\0\35\1\3\0\35\0\43\0\10\0\1\0\34\0\33\0"+
    "\66\1\12\0\26\1\12\0\23\1\15\0\22\0\156\0\111\1\u03b7\0"+
    "\3\2\65\1\17\2\37\0\12\2\20\0\3\2\55\1\13\2\2\0"+
    "\1\2\22\0\31\1\7\0\12\2\6\0\3\2\44\1\16\2\1\0"+
    "\12\2\20\0\43\0\3\0\1\0\11\0\3\2\60\1\16\2\4\1"+
    "\13\0\12\2\1\0\45\0\22\0\1\0\31\0\204\0\57\0\46\0"+
    "\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\5\0\3\0\1\0\37\0\5\0\u011e\0\60\0\24\0\2\0\1\0"+
    "\1\0\270\0\57\0\121\0\60\0\24\0\1\0\73\0\53\1\15\2"+
    "\10\0\12\2\u01d6\0\100\0\37\0\1\0\u01c0\0\71\0\u0507\0\u036f\1"+
    "\52\0\147\0\143\1\u0b9d\0\u042f\1\u33d1\0\u0239\1\7\0\37\0\161\0"+
    "\36\0\22\0\60\0\20\0\4\0\37\0\25\0\5\0\23\0\u0370\0"+
    "\105\1\13\0\1\1\56\2\20\0\4\2\15\1\u4060\0\2\1\u0bfe\0"+
    "\153\0\5\0\15\0\3\0\11\0\7\0\12\0\u14cb\0\5\2\3\0"+
    "\26\2\2\0\7\2\36\0\4\2\224\0\3\2\u01bb\0\125\1\1\0"+
    "\107\1\1\0\2\1\2\0\1\1\2\0\2\1\2\0\4\1\1\0"+
    "\14\1\1\0\1\1\1\0\7\1\1\0\101\1\1\0\4\1\2\0"+
    "\10\1\1\0\7\1\1\0\34\1\1\0\4\1\1\0\5\1\1\0"+
    "\1\1\3\0\7\1\1\0\u0154\1\2\0\31\1\1\0\31\1\1\0"+
    "\37\1\1\0\31\1\1\0\37\1\1\0\31\1\1\0\37\1\1\0"+
    "\31\1\1\0\37\1\1\0\31\1\1\0\10\1\2\0\62\2\u1000\0"+
    "\305\0\u053b\0\4\1\1\0\33\1\1\0\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\12\1\1\0\4\1\1\0\1\1\1\0\1\1\6\0"+
    "\1\1\4\0\1\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\2\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1\1\0\1\1\2\0\4\1\1\0"+
    "\7\1\1\0\4\1\1\0\4\1\1\0\1\1\1\0\12\1\1\0"+
    "\21\1\5\0\3\1\1\0\5\1\1\0\21\1\u1144\0\ua6d7\1\51\0"+
    "\u1035\1\13\0\336\1\u3fe2\0\u021e\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\2\36\0\140\2\200\0\360\2\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\4\1\5\2\2\1\6"+
    "\1\7\1\10\1\11\2\1\13\2\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\3"+
    "\1\0\1\34\1\35\2\2\1\36\1\2\1\0\1\37"+
    "\1\40\1\0\1\7\1\41\1\42\1\43\2\0\1\44"+
    "\3\0\16\2\1\45\3\2\1\46\1\0\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\0\3\2\1\40"+
    "\1\0\1\66\6\2\1\67\10\2\1\70\1\2\1\71"+
    "\1\72\1\73\1\74\1\75\1\3\1\76\10\2\1\77"+
    "\1\100\1\101\2\2\1\102\3\2\1\103\3\2\1\104"+
    "\1\2\1\105\1\106\3\2\1\107\5\2\1\110\1\111"+
    "\3\2\1\112\1\113\2\2\1\114\2\2\1\115\2\2"+
    "\1\116\2\2\1\117";

  private static int [] zzUnpackAction() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\77\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372"+
    "\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u056a"+
    "\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\77\0\77"+
    "\0\u0723\0\u0762\0\77\0\77\0\u07a1\0\u07e0\0\77\0\77"+
    "\0\u081f\0\77\0\77\0\u085e\0\u089d\0\u08dc\0\77\0\77"+
    "\0\u091b\0\u095a\0\176\0\u0999\0\u09d8\0\77\0\u0a17\0\u0a56"+
    "\0\u0a95\0\u0ad4\0\77\0\77\0\u0b13\0\u02f4\0\77\0\u0b52"+
    "\0\u0333\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b"+
    "\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\77\0\u103e\0\77\0\77"+
    "\0\u107d\0\77\0\77\0\77\0\77\0\77\0\77\0\u10bc"+
    "\0\77\0\77\0\u10fb\0\77\0\77\0\u113a\0\u1179\0\u11b8"+
    "\0\u11f7\0\u1236\0\u1275\0\77\0\u12b4\0\u12f3\0\u1332\0\u1371"+
    "\0\u13b0\0\u13ef\0\176\0\u142e\0\u146d\0\u14ac\0\u14eb\0\u152a"+
    "\0\u1569\0\u15a8\0\u15e7\0\176\0\u1626\0\176\0\77\0\77"+
    "\0\77\0\77\0\u1665\0\176\0\u16a4\0\u16e3\0\u1722\0\u1761"+
    "\0\u17a0\0\u17df\0\u181e\0\u185d\0\176\0\176\0\176\0\u189c"+
    "\0\u18db\0\176\0\u191a\0\u1959\0\u1998\0\176\0\u19d7\0\u1a16"+
    "\0\u1a55\0\176\0\u1a94\0\176\0\176\0\u1ad3\0\u1b12\0\u1b51"+
    "\0\176\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\176\0\176"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\176\0\176\0\u1d88\0\u1dc7\0\176"+
    "\0\u1e06\0\u1e45\0\176\0\u1e84\0\u1ec3\0\176\0\u1f02\0\u1f41"+
    "\0\176";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\2\5\1\6\1\7\1\3"+
    "\1\10\2\3\1\11\1\12\1\13\1\3\1\12\2\3"+
    "\1\14\1\15\1\16\2\2\1\5\1\2\1\17\1\20"+
    "\1\21\2\3\1\22\1\23\1\3\1\24\1\25\1\26"+
    "\1\27\1\3\1\30\1\31\2\3\1\32\1\33\1\34"+
    "\1\35\1\5\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\100\0\2\3\5\0\13\3\6\0\1\3\1\0"+
    "\21\3\27\0\1\5\100\0\1\55\1\56\46\0\1\57"+
    "\76\0\1\60\21\0\2\3\5\0\3\3\1\61\7\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\1\62"+
    "\12\3\6\0\1\3\1\0\5\3\1\63\6\3\1\64"+
    "\4\3\34\0\1\65\2\0\1\66\2\12\1\0\1\12"+
    "\1\0\1\65\1\0\1\67\63\0\1\65\3\0\1\70"+
    "\1\71\1\0\1\71\1\72\1\65\1\0\1\67\75\0"+
    "\1\73\32\0\1\74\35\0\2\67\1\0\1\67\3\0"+
    "\1\75\52\0\25\76\1\77\1\100\50\76\26\101\1\102"+
    "\3\101\1\77\44\101\1\0\2\3\5\0\13\3\6\0"+
    "\1\3\1\0\1\3\1\103\17\3\24\0\2\3\5\0"+
    "\1\3\1\104\11\3\6\0\1\3\1\0\2\3\1\105"+
    "\16\3\24\0\2\3\5\0\1\3\1\106\11\3\6\0"+
    "\1\3\1\0\21\3\24\0\2\3\5\0\13\3\6\0"+
    "\1\3\1\0\2\3\1\107\3\3\1\110\4\3\1\111"+
    "\5\3\24\0\2\3\5\0\13\3\6\0\1\3\1\0"+
    "\17\3\1\112\1\3\24\0\2\3\5\0\13\3\6\0"+
    "\1\3\1\0\2\3\1\113\10\3\1\114\2\3\1\115"+
    "\2\3\24\0\2\3\5\0\1\3\1\116\1\117\10\3"+
    "\6\0\1\3\1\0\7\3\1\120\11\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\13\3\1\121\5\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\2\3"+
    "\1\122\16\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\2\3\1\123\16\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\2\3\1\124\16\3\77\0\1\125"+
    "\1\0\1\126\75\0\1\127\1\130\10\0\1\131\65\0"+
    "\1\132\76\0\1\133\76\0\1\134\4\0\1\135\36\0"+
    "\1\136\32\0\1\137\5\0\1\140\70\0\1\141\76\0"+
    "\1\142\11\0\1\143\64\0\1\144\76\0\1\145\20\0"+
    "\4\55\1\5\72\55\6\56\1\0\1\146\67\56\1\0"+
    "\2\3\5\0\13\3\6\0\1\3\1\0\11\3\1\147"+
    "\7\3\24\0\2\3\5\0\13\3\6\0\1\3\1\0"+
    "\7\3\1\150\11\3\24\0\2\3\5\0\13\3\6\0"+
    "\1\3\1\0\15\3\1\151\3\3\40\0\2\152\1\0"+
    "\1\152\2\0\1\153\30\0\1\153\33\0\1\65\2\0"+
    "\1\66\2\67\1\0\1\67\1\0\1\65\65\0\1\65"+
    "\3\0\2\70\1\0\1\70\1\0\1\65\1\0\1\67"+
    "\63\0\1\65\3\0\1\70\1\71\1\0\1\71\1\0"+
    "\1\65\1\0\1\67\63\0\1\72\3\0\4\72\1\0"+
    "\1\72\10\0\1\72\1\0\1\72\1\0\2\72\2\0"+
    "\1\72\57\0\1\154\52\0\3\76\2\0\22\76\3\0"+
    "\45\76\3\101\2\0\22\101\3\0\45\101\1\0\2\3"+
    "\5\0\1\3\1\155\11\3\6\0\1\3\1\0\21\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\7\3"+
    "\1\156\11\3\24\0\2\3\5\0\1\157\12\3\6\0"+
    "\1\3\1\0\21\3\24\0\2\3\5\0\13\3\6\0"+
    "\1\3\1\0\5\3\1\160\13\3\24\0\2\3\5\0"+
    "\3\3\1\161\7\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\1\162\12\3\6\0\1\3\1\0\21\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\1\3"+
    "\1\163\17\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\15\3\1\164\3\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\11\3\1\165\7\3\24\0\2\3"+
    "\5\0\1\166\12\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\13\3\6\0\1\3\1\0\2\3\1\167"+
    "\16\3\24\0\2\3\5\0\3\3\1\170\7\3\6\0"+
    "\1\3\1\0\21\3\24\0\2\3\5\0\4\3\1\171"+
    "\6\3\6\0\1\3\1\0\21\3\24\0\2\3\5\0"+
    "\13\3\6\0\1\3\1\0\1\3\1\172\17\3\24\0"+
    "\2\3\5\0\13\3\6\0\1\3\1\0\7\3\1\173"+
    "\11\3\24\0\2\3\5\0\13\3\6\0\1\3\1\0"+
    "\15\3\1\174\3\3\24\0\2\3\5\0\13\3\6\0"+
    "\1\3\1\0\10\3\1\175\10\3\24\0\2\3\5\0"+
    "\13\3\6\0\1\3\1\0\1\3\1\176\17\3\102\0"+
    "\1\177\75\0\1\200\76\0\1\201\76\0\1\202\26\0"+
    "\1\203\71\0\2\3\5\0\1\3\1\204\11\3\6\0"+
    "\1\3\1\0\21\3\24\0\2\3\5\0\1\3\1\205"+
    "\11\3\6\0\1\3\1\0\21\3\24\0\2\3\5\0"+
    "\13\3\6\0\1\3\1\0\13\3\1\206\5\3\37\0"+
    "\1\66\2\152\1\0\1\152\73\0\2\152\1\0\1\152"+
    "\57\0\2\3\5\0\13\3\6\0\1\3\1\0\2\3"+
    "\1\207\16\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\6\3\1\210\12\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\12\3\1\211\6\3\24\0\2\3"+
    "\5\0\1\3\1\212\11\3\6\0\1\3\1\0\2\3"+
    "\1\213\16\3\24\0\2\3\5\0\3\3\1\214\7\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\10\3\1\215\10\3\24\0\2\3"+
    "\5\0\1\3\1\216\11\3\6\0\1\3\1\0\21\3"+
    "\24\0\2\3\5\0\1\3\1\217\11\3\6\0\1\3"+
    "\1\0\21\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\7\3\1\220\1\3\1\221\7\3\24\0\2\3"+
    "\5\0\1\222\12\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\1\3\1\223\11\3\6\0\1\3\1\0"+
    "\21\3\24\0\2\3\5\0\13\3\6\0\1\3\1\0"+
    "\7\3\1\224\11\3\24\0\2\3\5\0\13\3\6\0"+
    "\1\3\1\0\6\3\1\225\12\3\24\0\2\3\5\0"+
    "\13\3\6\0\1\3\1\0\13\3\1\226\5\3\24\0"+
    "\2\3\5\0\13\3\6\0\1\3\1\0\3\3\1\227"+
    "\15\3\26\0\1\4\1\5\73\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\1\3\1\230\17\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\1\3\1\231\17\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\3\3"+
    "\1\232\15\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\1\3\1\233\17\3\24\0\2\3\5\0\1\3"+
    "\1\234\11\3\6\0\1\3\1\0\21\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\1\3\1\235\17\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\6\3"+
    "\1\236\12\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\7\3\1\237\11\3\24\0\2\3\5\0\4\3"+
    "\1\240\6\3\6\0\1\3\1\0\21\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\7\3\1\241\11\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\10\3"+
    "\1\242\10\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\10\3\1\243\10\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\10\3\1\244\10\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\2\3\1\245\16\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\5\3"+
    "\1\246\13\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\7\3\1\247\11\3\24\0\2\3\5\0\1\250"+
    "\12\3\6\0\1\3\1\0\21\3\24\0\2\3\5\0"+
    "\3\3\1\251\7\3\6\0\1\3\1\0\21\3\24\0"+
    "\2\3\5\0\13\3\6\0\1\3\1\0\16\3\1\252"+
    "\2\3\24\0\2\3\5\0\1\253\12\3\6\0\1\3"+
    "\1\0\21\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\7\3\1\254\11\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\16\3\1\255\2\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\7\3\1\226\11\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\12\3"+
    "\1\256\6\3\24\0\2\3\5\0\13\3\6\0\1\3"+
    "\1\0\2\3\1\257\16\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\7\3\1\260\11\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\1\3\1\261\17\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\6\3"+
    "\1\262\12\3\24\0\2\3\5\0\1\3\1\263\11\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\10\3\1\264\10\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\13\3\1\265\5\3"+
    "\24\0\2\3\5\0\1\3\1\266\11\3\6\0\1\3"+
    "\1\0\21\3\24\0\2\3\5\0\1\3\1\226\11\3"+
    "\6\0\1\3\1\0\21\3\24\0\2\3\5\0\13\3"+
    "\6\0\1\3\1\0\6\3\1\267\12\3\24\0\2\3"+
    "\5\0\13\3\6\0\1\3\1\0\12\3\1\270\6\3"+
    "\24\0\2\3\5\0\13\3\6\0\1\3\1\0\16\3"+
    "\1\271\2\3\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8064];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\31\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\2\11\2\1\1\0\2\11\4\1"+
    "\1\0\1\11\1\1\1\0\2\1\2\11\2\0\1\11"+
    "\3\0\22\1\1\11\1\0\2\11\1\1\6\11\1\1"+
    "\2\11\1\1\2\11\1\0\4\1\1\0\1\11\22\1"+
    "\4\11\67\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[185];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

       private Symbol symbol(int type) {
           return new Symbol(type, yyline, yycolumn);
          }

        private Symbol symbol(int type, Object val) {
           return new Symbol(type, yyline, yycolumn, val);
          }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [2147483647] { System.out.print(yytext()); }");
            { System.out.print(yytext());
            }
          case 80: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [157] { return symbol(sym.IDENTIFIER, new String(yytext())); }");
            { return symbol(sym.IDENTIFIER, new String(yytext()));
            }
          case 81: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [156] { /* Ignore */ }");
            { /* Ignore */
            }
          case 82: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [128] { return symbol(sym.DIVISION, new String(yytext())); }");
            { return symbol(sym.DIVISION, new String(yytext()));
            }
          case 83: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [119] { return symbol(sym.MULTIPLICATION, new String(yytext())); }");
            { return symbol(sym.MULTIPLICATION, new String(yytext()));
            }
          case 84: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [153] { return symbol(sym.DECIMAL_LITERAL, new String(yytext())); }");
            { return symbol(sym.DECIMAL_LITERAL, new String(yytext()));
            }
          case 85: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [160] { return symbol(sym.OCTAL_LITERAL, new String(yytext())); }");
            { return symbol(sym.OCTAL_LITERAL, new String(yytext()));
            }
          case 86: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { return symbol(sym.MINUS, new String(yytext())); }");
            { return symbol(sym.MINUS, new String(yytext()));
            }
          case 87: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [144] { return symbol(sym.DOT, new String(yytext())); }");
            { return symbol(sym.DOT, new String(yytext()));
            }
          case 88: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [101] { return symbol(sym.PLUS, new String(yytext())); }");
            { return symbol(sym.PLUS, new String(yytext()));
            }
          case 89: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { return symbol(sym.BIT_AND, new String(yytext())); }");
            { return symbol(sym.BIT_AND, new String(yytext()));
            }
          case 90: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [133] { return symbol(sym.ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.ASSINGMENT, new String(yytext()));
            }
          case 91: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [142] { return symbol(sym.EXCLAMATION_POINT, new String(yytext())); }");
            { return symbol(sym.EXCLAMATION_POINT, new String(yytext()));
            }
          case 92: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { return symbol(sym.OPEN_PARENTHESES, new String(yytext())); }");
            { return symbol(sym.OPEN_PARENTHESES, new String(yytext()));
            }
          case 93: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { return symbol(sym.CLOSE_PARENTHESES, new String(yytext())); }");
            { return symbol(sym.CLOSE_PARENTHESES, new String(yytext()));
            }
          case 94: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { return symbol(sym.BIT_OR, new String(yytext())); }");
            { return symbol(sym.BIT_OR, new String(yytext()));
            }
          case 95: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [115] { return symbol(sym.LESS_THAN, new String(yytext())); }");
            { return symbol(sym.LESS_THAN, new String(yytext()));
            }
          case 96: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [117] { return symbol(sym.OPEN_SQUARE_BRACKET, new String(yytext())); }");
            { return symbol(sym.OPEN_SQUARE_BRACKET, new String(yytext()));
            }
          case 97: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { return symbol(sym.CLOSE_SQUARE_BRACKET, new String(yytext())); }");
            { return symbol(sym.CLOSE_SQUARE_BRACKET, new String(yytext()));
            }
          case 98: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [120] { return symbol(sym.BIT_XOR, new String(yytext())); }");
            { return symbol(sym.BIT_XOR, new String(yytext()));
            }
          case 99: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [124] { return symbol(sym.GREATER_THAN, new String(yytext())); }");
            { return symbol(sym.GREATER_THAN, new String(yytext()));
            }
          case 100: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [126] { return symbol(sym.OPEN_CURLY_BRACKETS, new String(yytext())); }");
            { return symbol(sym.OPEN_CURLY_BRACKETS, new String(yytext()));
            }
          case 101: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { return symbol(sym.CLOSE_CURLY_BRACKETS, new String(yytext())); }");
            { return symbol(sym.CLOSE_CURLY_BRACKETS, new String(yytext()));
            }
          case 102: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [145] { return symbol(sym.COLON, new String(yytext())); }");
            { return symbol(sym.COLON, new String(yytext()));
            }
          case 103: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [135] { return symbol(sym.COMMA, new String(yytext())); }");
            { return symbol(sym.COMMA, new String(yytext()));
            }
          case 104: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [136] { return symbol(sym.SEMICOLON, new String(yytext())); }");
            { return symbol(sym.SEMICOLON, new String(yytext()));
            }
          case 105: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [137] { return symbol(sym.PERCENT, new String(yytext())); }");
            { return symbol(sym.PERCENT, new String(yytext()));
            }
          case 106: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [130] { return symbol(sym.DIVISION_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.DIVISION_ASSINGMENT, new String(yytext()));
            }
          case 107: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [121] { return symbol(sym.MULTIPLICATION_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.MULTIPLICATION_ASSINGMENT, new String(yytext()));
            }
          case 108: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return symbol(sym.IF, new String(yytext())); }");
            { return symbol(sym.IF, new String(yytext()));
            }
          case 109: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [159] { return symbol(sym.IMAGINARY_LITERAL, new String(yytext())); }");
            { return symbol(sym.IMAGINARY_LITERAL, new String(yytext()));
            }
          case 110: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [154] { return symbol(sym.FLOAT_LITERAL, new String(yytext())); }");
            { return symbol(sym.FLOAT_LITERAL, new String(yytext()));
            }
          case 111: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [155] { return symbol(sym.HEX_LITERAL, new String(yytext())); }");
            { return symbol(sym.HEX_LITERAL, new String(yytext()));
            }
          case 112: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [141] { return symbol(sym.MINUS_MINUS, new String(yytext())); }");
            { return symbol(sym.MINUS_MINUS, new String(yytext()));
            }
          case 113: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { return symbol(sym.MINUS_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.MINUS_ASSINGMENT, new String(yytext()));
            }
          case 114: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [158] { return symbol(sym.STRING_LITERAL, new String(yytext())); }");
            { return symbol(sym.STRING_LITERAL, new String(yytext()));
            }
          case 115: break;
          case 37: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return symbol(sym.GO, new String(yytext())); }");
            { return symbol(sym.GO, new String(yytext()));
            }
          case 116: break;
          case 38: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [132] { return symbol(sym.PLUS_PLUS, new String(yytext())); }");
            { return symbol(sym.PLUS_PLUS, new String(yytext()));
            }
          case 117: break;
          case 39: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { return symbol(sym.LOGICAL_AND, new String(yytext())); }");
            { return symbol(sym.LOGICAL_AND, new String(yytext()));
            }
          case 118: break;
          case 40: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { return symbol(sym.BIT_AND_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.BIT_AND_ASSINGMENT, new String(yytext()));
            }
          case 119: break;
          case 41: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [146] { return symbol(sym.BIT_AND_NOT, new String(yytext())); }");
            { return symbol(sym.BIT_AND_NOT, new String(yytext()));
            }
          case 120: break;
          case 42: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { return symbol(sym.EQUALS, new String(yytext())); }");
            { return symbol(sym.EQUALS, new String(yytext()));
            }
          case 121: break;
          case 43: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { return symbol(sym.NOT_EQUALS, new String(yytext())); }");
            { return symbol(sym.NOT_EQUALS, new String(yytext()));
            }
          case 122: break;
          case 44: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [113] { return symbol(sym.BIT_OR_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.BIT_OR_ASSINGMENT, new String(yytext()));
            }
          case 123: break;
          case 45: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { return symbol(sym.LOGICAL_OR, new String(yytext())); }");
            { return symbol(sym.LOGICAL_OR, new String(yytext()));
            }
          case 124: break;
          case 46: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [123] { return symbol(sym.LEFT_ARROW, new String(yytext())); }");
            { return symbol(sym.LEFT_ARROW, new String(yytext()));
            }
          case 125: break;
          case 47: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [116] { return symbol(sym.LESS_THAN_EQUALS, new String(yytext())); }");
            { return symbol(sym.LESS_THAN_EQUALS, new String(yytext()));
            }
          case 126: break;
          case 48: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [129] { return symbol(sym.BIN_SHIFT_LEFT, new String(yytext())); }");
            { return symbol(sym.BIN_SHIFT_LEFT, new String(yytext()));
            }
          case 127: break;
          case 49: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [122] { return symbol(sym.BIT_XOR_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.BIT_XOR_ASSINGMENT, new String(yytext()));
            }
          case 128: break;
          case 50: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [125] { return symbol(sym.GREATER_THAN_EQUALS, new String(yytext())); }");
            { return symbol(sym.GREATER_THAN_EQUALS, new String(yytext()));
            }
          case 129: break;
          case 51: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [138] { return symbol(sym.BIN_SHIFT_RIGHT, new String(yytext())); }");
            { return symbol(sym.BIN_SHIFT_RIGHT, new String(yytext()));
            }
          case 130: break;
          case 52: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [134] { return symbol(sym.COLON_EQUALS, new String(yytext())); }");
            { return symbol(sym.COLON_EQUALS, new String(yytext()));
            }
          case 131: break;
          case 53: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [139] { return symbol(sym.PERCENT_EQUALS, new String(yytext())); }");
            { return symbol(sym.PERCENT_EQUALS, new String(yytext()));
            }
          case 132: break;
          case 54: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [143] { return symbol(sym.RETICENCE, new String(yytext())); }");
            { return symbol(sym.RETICENCE, new String(yytext()));
            }
          case 133: break;
          case 55: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [94] { return symbol(sym.FOR, new String(yytext())); }");
            { return symbol(sym.FOR, new String(yytext()));
            }
          case 134: break;
          case 56: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [81] { return symbol(sym.MAP, new String(yytext())); }");
            { return symbol(sym.MAP, new String(yytext()));
            }
          case 135: break;
          case 57: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [97] { return symbol(sym.VAR, new String(yytext())); }");
            { return symbol(sym.VAR, new String(yytext()));
            }
          case 136: break;
          case 58: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [103] { return symbol(sym.PLUS_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.PLUS_ASSINGMENT, new String(yytext()));
            }
          case 137: break;
          case 59: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [147] { return symbol(sym.BIT_AND_NOT_ASSIGNMENT, new String(yytext())); }");
            { return symbol(sym.BIT_AND_NOT_ASSIGNMENT, new String(yytext()));
            }
          case 138: break;
          case 60: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [131] { return symbol(sym.BIN_SHIFT_LEFT_ASSINGMENT, new String(yytext())); }");
            { return symbol(sym.BIN_SHIFT_LEFT_ASSINGMENT, new String(yytext()));
            }
          case 139: break;
          case 61: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [140] { return symbol(sym.BIN_SHIFT_RIGHT_ASSIGNMENT, new String(yytext())); }");
            { return symbol(sym.BIN_SHIFT_RIGHT_ASSIGNMENT, new String(yytext()));
            }
          case 140: break;
          case 62: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return symbol(sym.ELSE, new String(yytext())); }");
            { return symbol(sym.ELSE, new String(yytext()));
            }
          case 141: break;
          case 63: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return symbol(sym.FUNC, new String(yytext())); }");
            { return symbol(sym.FUNC, new String(yytext()));
            }
          case 142: break;
          case 64: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return symbol(sym.TYPE, new String(yytext())); }");
            { return symbol(sym.TYPE, new String(yytext()));
            }
          case 143: break;
          case 65: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return symbol(sym.CASE, new String(yytext())); }");
            { return symbol(sym.CASE, new String(yytext()));
            }
          case 144: break;
          case 66: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [83] { return symbol(sym.CHAN, new String(yytext())); }");
            { return symbol(sym.CHAN, new String(yytext()));
            }
          case 145: break;
          case 67: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return symbol(sym.INTERFACE, new String(yytext())); }");
            { return symbol(sym.INTERFACE, new String(yytext()));
            }
          case 146: break;
          case 68: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return symbol(sym.BREAK, new String(yytext())); }");
            { return symbol(sym.BREAK, new String(yytext()));
            }
          case 147: break;
          case 69: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return symbol(sym.RANGE, new String(yytext())); }");
            { return symbol(sym.RANGE, new String(yytext()));
            }
          case 148: break;
          case 70: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return symbol(sym.DEFER, new String(yytext())); }");
            { return symbol(sym.DEFER, new String(yytext()));
            }
          case 149: break;
          case 71: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return symbol(sym.CONST, new String(yytext())); }");
            { return symbol(sym.CONST, new String(yytext()));
            }
          case 150: break;
          case 72: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return symbol(sym.IMPORT, new String(yytext())); }");
            { return symbol(sym.IMPORT, new String(yytext()));
            }
          case 151: break;
          case 73: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [96] { return symbol(sym.RETURN, new String(yytext())); }");
            { return symbol(sym.RETURN, new String(yytext()));
            }
          case 152: break;
          case 74: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [77] { return symbol(sym.SELECT, new String(yytext())); }");
            { return symbol(sym.SELECT, new String(yytext()));
            }
          case 153: break;
          case 75: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return symbol(sym.SWITCH, new String(yytext())); }");
            { return symbol(sym.SWITCH, new String(yytext()));
            }
          case 154: break;
          case 76: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return symbol(sym.DEFAULT, new String(yytext())); }");
            { return symbol(sym.DEFAULT, new String(yytext()));
            }
          case 155: break;
          case 77: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [86] { return symbol(sym.PACKAGE, new String(yytext())); }");
            { return symbol(sym.PACKAGE, new String(yytext()));
            }
          case 156: break;
          case 78: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return symbol(sym.CONTINUE, new String(yytext())); }");
            { return symbol(sym.CONTINUE, new String(yytext()));
            }
          case 157: break;
          case 79: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return symbol(sym.FALLTHROUGH, new String(yytext())); }");
            { return symbol(sym.FALLTHROUGH, new String(yytext()));
            }
          case 158: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
